" Setup a testing environment that is isolated from the other plugins.
"
filetype off

set runtimepath=vendor/vader.vim
set runtimepath+=.

filetype plugin on
filetype indent on

syntax enable

let mapleader = ";"
let maplocalleader = ";"
let g:refactoring_toolbox_usage_logdir = './var/log'
let g:test_tmpdir = './var/tmp'

autocmd FileType * call TestSwitchFileTypeTo(expand("<amatch>"))

function TestResetConfiguration()
    let g:refactoring_toolbox_auto_validate = 0
    let g:refactoring_toolbox_auto_validate_sg = g:refactoring_toolbox_auto_validate
    let g:refactoring_toolbox_auto_validate_g = g:refactoring_toolbox_auto_validate
    let g:refactoring_toolbox_auto_validate_rename = g:refactoring_toolbox_auto_validate
    let g:refactoring_toolbox_auto_validate_visibility = g:refactoring_toolbox_auto_validate
    let g:refactoring_toolbox_default_property_visibility = 'private'
    let g:refactoring_toolbox_default_method_visibility = 'private'
    let g:refactoring_toolbox_make_setter_fluent = 0
endfunction

function TestDebug(name, value)
    call append(line('.'), '')
    call cursor(line('.') + 1, 0)

    execute 'normal! i'.a:name.'='.a:value
endfunction

function TestLoadFileTypeInIsolation(type)
    call s:copyCurrentBuffer()
    call s:makeNewBufferWithLastCopy()

    call TestLoadFileType(a:type)
endfunction

function TestSwitchFileTypeTo(newType)
    if exists('b:undo_ftplugin')
        execute b:undo_ftplugin

        unlet b:undo_ftplugin
    endif

    call TestLoadFileType(a:newType)
endfunction

function TestLoadFileType(type)
    if '' == a:type
        return
    endif

    execute 'runtime! ftplugin/'.a:type.'/*.vim'
endfunction

function s:copyCurrentBuffer()
    execute 'normal! ggyG'
endfunction

function s:makeNewBufferWithLastCopy()
    new
    execute 'normal! pkdd'
endfunction

function AssertNormalMappingTo(expectedTarget)
  AssertEqual 1, hasmapto(a:expectedTarget, 'n'), 'has normal mapping to "'.a:expectedTarget.'" on file type "'.&filetype.'".'
endfunction

function AssertNotNormalMappingTo(expectedTarget)
  AssertEqual 0, hasmapto(a:expectedTarget, 'n'), 'does not have normal mapping to "'.a:expectedTarget.'" on file type "'.&filetype.'".'
endfunction

function AssertVisualMappingTo(expectedTarget)
  AssertEqual 1, hasmapto(a:expectedTarget, 'v'), 'has visual mapping to "'.a:expectedTarget.'" on file type "'.&filetype.'".'
endfunction

function AssertNotVisualMappingTo(expectedTarget)
  AssertEqual 0, hasmapto(a:expectedTarget, 'v'), 'does not have visual mapping to "'.a:expectedTarget.'" on file type "'.&filetype.'".'
endfunction
